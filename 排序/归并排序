package 算法;

import java.util.Arrays;

public class 归并排序 {
    public static void main(String[] args) {
        int[] arr = {2, 523, 3, 54, 435, 56, 676, 76, 2, 57, 454};
//        int[] arr = {1, 3, 5, 2, 4, 6, 8, 10};
        System.out.println(Arrays.toString(arr));
        mergeSort(arr, 0, arr.length-1);
        System.out.println(Arrays.toString(arr));
    }

    public static void mergeSort(int[] arr, int low, int height) {
        int middle = (height + low) / 2;
        if (low < height) {
            //        处理左边
            mergeSort(arr, low, middle);
//        处理右边
            mergeSort(arr, middle+1, height);
//        归并
            merge(arr, low, middle, height);
        }

    }



//参数给一个数组，告诉从哪开始哪分割哪里结束
    public static void merge(int[] arr, int low, int middle, int high) {
//        用于存储归并后的临时数组
        int[] temparr = new int[high - low + 1];
        //记录第一个数组中需要遍历的下标
        int i = low;
        //记录第二个数组中需要遍历的下标
        int j = middle + 1;
//        用于记录在临时数组中存放的下标
        int index = 0;
//        遍历两个数组，取出小的数字放入临时的数组中
        while (i <= middle && j <= high) {
//            第一个数组的数据更小
            if (arr[i] <= arr[j]) {
//                吧小的数据放入临时数组中，让下标向后移动一位
                temparr[index] = arr[i];
                i++;
            }else {
                temparr[index] = arr[j];
                j++;
            }
            index++;
        }
//            处理多余的数据
        while (j <= high) {
            temparr[index] = arr[j];
            j++;
            index++;
        }
        while (i <= middle) {
            temparr[index] = arr[i];
            i++;
            index++;
        }
//         吧临时数组的数据存入原数组
        for (int k = 0; k < temparr.length; k++) {
            arr[k + low] = temparr[k];
        }

    }


}
